<script src="../simpletest.js"></script>
<script>

// Function signature:
  // findIndex(array, callback( element[, index[, array]] )[, thisArg])

// Callback parameters:
  // element
  // index
  // array

// Return value:
  // returns the index of the first element in the array that satisfies the 
  // provided testing function. Otherwise, -1.

// Description:
  // The find method executes the callback function once for each index of the array 
  // until the callback returns a truthy value.

// The range of elements processed by findIndex is set before the first invocation of callback.
// callback will not process the elements appended to the array after the call to findIndex begins.
// If an existing, unvisited element of the array is changed by callback, its value passed to the 
  // callback will be the value at the time findIndex visits the element's index.
// Elements that are deleted are still visited.

// Case A: callback returns a truthy value.
  // findIndex immediately returns the index of that element.
// Case B: callback does not return a truthy value, or array.length === 0.
  // findIndex returns -1. 

// Case C: thisArg parameter is passed to findIndex.
  // it will be used as the this inside each invocation of the callback. 
// Case D: thisArg parameter is not provided.
  // undefined is used.

// Edge cases:
  // callback is run even for indexes with unassigned values. (not included)

// Test descriptions:
// '#1: It should run array.length times.'
// '#2: It should pass in ith element as the first argument to the callback.'
// '#3: It should pass in ith position as the second argument to the callback.'
// '#4: It should pass in the original array as the third argument to the callback.'
// '#5: It should accept an optional this argument.'
// '#6: If no optional this argument, this should be be undefined.'
// '#7: If truthy value, it should immediately return the index of that element.'
// '#8: If no truthy value, it should return -1.'
// '#9: If length of array is 0, it should return -1.'
// '#10: It should also run on empty holes in the array.'
// '#11: It should not allow callback to visit any elements added to array after call to findIndex begins.'
// '#12: It should pass in the most current value of an element to the callback.'
// '#13: It should still call callback on deleted elements.'

//Code:

function findIndex(originalArray, callback, optionalThis) {
  var findIndexCallback = callback;
  var arrayLength = originalArray.length;
  var callbackIsTrue = false;

  if (optionalThis) {
    findIndexCallback = callback.bind(optionalThis);
  }

  // If array is empty, return -1.
  if (Object.keys(originalArray).length === 0) {
    return -1;
  }
  
  for (var i = 0; i < arrayLength; i++) {
    if ((findIndexCallback(originalArray[i], i, originalArray)) === true) {
      callbackIsTrue = true;
      return i;
    }
  }
  if (callbackIsTrue === false) {
    return -1;
  }
}

tests({
  'It should run array.length times.': function() {
    var numberOfTimesCallbackHasRun = 0;
    findIndex([1, 2, 3], function() {
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 3);
  },
  'It should pass in ith element as the first argument to the callback.': function() {
    findIndex([1], function(element) {
      eq(element, 1);
    });
  },
  'It should pass in ith position as the second argument to the callback.': function() {
    findIndex([1], function(element, index) {
      eq(index, 0);
    });
  },
  'It should pass in the original array as the third argument to the callback.': function() {
    var testArray = [];
    findIndex(testArray, function(element, index, originalArray) {
      eq(originalArray, testArray);
    });
  },
  'It should accept an optional this argument.': function() {
    findIndex([1], function() {
      eq(this.description, 'I should be accessible inside of the callback');
    }, {description: 'I should be accessible inside of the callback'});
  },
  'If no optional this argument, this should be be undefined.': function() {
    findIndex([1], function(element, index, originalArray) {
      eq(this.description, undefined);
    });
  },
  'If truthy value, it should immediately return the index of that element.': function() {
    var result = findIndex([1, 2, 3], function(element) {
      return element > 2;
    });
    eq(result, 2);
  },
  'If no truthy value, it should return -1.': function() {
    var result = findIndex([1, 2], function(element) {
      return element > 2;
    });
    eq(result, -1);
  },
  'If length of array is 0, it should return -1.': function() {
    var result = findIndex([], function() {});
    eq(result, -1);
  },
  'It should also run on empty holes in the array.': function() {
    var numberOfTimesCallbackHasRun = 0;
    findIndex([, 1, , 2, 3, ,], function() {
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 6);
  },
  'It should not allow callback to visit any elements added to array after call to findIndex begins.': function() {
    var numberOfTimesCallbackHasRun = 0;
    findIndex([1, 2, 3], function(element, index, array) {
      array.push(4);
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 3);
  },
  'It should pass in the most current value of an element to the callback.': function() {
    var result = findIndex([1, 2], function(element, index, array) {
      array[1] = 3;
      return element > 2;
      eq(array[1], 3);
    });
    eq(result, 1);
  },
  'It should still call callback on deleted elements.': function() {
    var numberOfTimesCallbackHasRun = 0;
    findIndex([1, 2], function(element, index, array) {
      numberOfTimesCallbackHasRun++;
      if (index === 0) {
        delete array[1];
      }
    });
    eq(numberOfTimesCallbackHasRun, 2);
  }
});

</script>
