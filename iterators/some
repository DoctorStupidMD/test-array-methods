<script src="../simpletest.js"></script>
<script>

// Function signature:
  // some(array, callback(element[, index[, array]])[, thisArg])

// Callback parameters:
  // element
  // index
  // array

// Return value:
  // true if the callback function returns a truthy value for at least 
  // one element in the array. Otherwise, false.

// Description:
  // The some() method tests whether at least one element in the array passes 
  // the test implemented by the provided function. It returns a Boolean value.

// Case A: A truthy element is found.
  // Immediately return true.
// Case B: A truthy element is not found.
  // Return false.

// Case C: thisArg parameter is provided to some.
  // It will be used as callback's this value.
// Case D: thisArg parameter is not provided to some.
  // undefined will be used as its this value.

// Case E: Callback is not invoked for indexes:
  // Which have been deleted.
  // Which have never been assigned values (no holes or undefined).

// some does not mutate the array on which it is called.
// Elements appended to the array after the call to some begins 
  // will not be visited by callback.
// If an existing, unvisited element of the array is changed by callback, 
  // its value passed to the visiting callback will be the value at the time 
  // that some visits that element's index.
// An empty array returns false for any condition.

// Test descriptions:
// '#1: It should pass in ith element as the first argument to the callback.'
// '#2: It should pass in ith position as the second argument to the callback.'
// '#3: It should pass in the original array as the third argument to the callback.'
// '#4: It should accept an optional this argument.'
// '#5: If no optional this argument, this should be be undefined.'
// '#6: It should return true if any array element passes the test in callback.'
// '#7: It should return false immediately if no array elements pass the test in callback.'
// '#8: It should not run callback on elements that are appended after the call begins.'
// '#9: It should skip holes in the array.'
// '#10: It should skip deleted elements.'
// '#11: It should not mutate the array on which it is called.'
// '#12: It should return false if the array is empty.'
// '#13: It should run callback array.length times if no elements in the array pass the test.'

// Code:

function some(array, callback, optionalThis) {
  var someCallback = callback;
  var arrayLength = array.length;
  var callbackReturnsATrue = false;

  if (optionalThis) {
    someCallback = callback.bind(optionalThis);
  }

  for (var i = 0; i < arrayLength; i++) {
    if (i in array) {
      if ((someCallback(array[i], i, array)) === true) {
        callbackReturnsATrue = true;
        return true;
      } else {
        callbackReturnsATrue = false;
      }
    }
  }
  if (callbackReturnsATrue === false) {
    return false;
  }
}

tests({
  'It should pass in ith element as the first argument to the callback.': function() {
    some([1], function(element) {
      eq(element, 1);
    });
  },
  'It should pass in ith position as the second argument to the callback.': function() {
    some([1], function(element, index) {
      eq(index, 0);
    });
  },
  'It should pass in the original array as the third argument to the callback.': function() {
    var testArray = [];
    some(testArray, function(element, index, originalArray) {
      eq(originalArray, testArray);
    });
  },
  'It should accept an optional this argument.': function() {
    some([1], function() {
      eq(this.description, 'I should be accessible inside of the callback');
    }, {description: 'I should be accessible inside of the callback'});
  },
  'If no optional this argument, this should be be undefined.': function() {
    some([1],function() {
      eq(this.description, undefined);
    });
  },
  'It should return true if any array element passes the test in callback.': function() {
    var result = some([1, 2, 3], function(element) {
      return element > 0;
    });
    eq(result, true);
  },
  'It should return false immediately if no array elements pass the test in callback.': function() {
    var result = some([1, 2, 3], function(element) {
      return element > 3;
    });
    eq(result, false);
  },
  'It should not run callback on elements that are appended after the call begins.': function() {
    var numberOfTimesCallbackHasRun = 0;
    some([1, 2, 3], function(element, index, array) {
      numberOfTimesCallbackHasRun++;
      array.push(4);
    });
    eq(numberOfTimesCallbackHasRun, 3);
  },
  'It should skip holes in the array.': function() {
    var numberOfTimesCallbackHasRun = 0;
    some([1, , 2, , 3], function(element) {
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 3);
  },
  'It should skip deleted elements.': function() {
    var numberOfTimesCallbackHasRun = 0;
    some([1, 2, 3], function(element, index, array) {
      if (index === 0) {
        delete array[1];
      }
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 2);
  },
  'It should not mutate the array on which it is called.': function() {
    var testArray = [1, 2, 3];
    some(testArray, function(element) {
      return element > 1;
    });
    eq(testArray.length, 3);
  },
  'It should return false if the array is empty.': function() {
    var result = some([], function(element) {
      return element === 0;
    });
    eq(result, false);
  },
  'It should run callback array.length times if no elements in the array pass the test.': function() {
    var numberOfTimesCallbackHasRun = 0;
    some([1, 2, 3], function(element) {
      numberOfTimesCallbackHasRun++;
      return element === 4;
    });
    eq(numberOfTimesCallbackHasRun, 3);
  }
});

</script>
